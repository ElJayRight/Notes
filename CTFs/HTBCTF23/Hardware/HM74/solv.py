def hamming_decode(encoded_data):
    # Extract the parity bits and data bits from the encoded data
    p0, p1, d2, p2, d1, d0,d2 = encoded_data

    # Compute the syndrome bits
    s0 = p0 ^ d2 ^ d1 ^ d0
    s1 = p1 ^ d2 ^ d0 ^ d1
    s2 = p2 ^ d1 ^ d0 ^ d2

    # Determine the index of the error, if any
    error_index = s2*4 + s1*2 + s0*1

    if error_index != 0:
        # If there was an error, correct it
        encoded_data[error_index-1] = 1 - encoded_data[error_index-1]

    # Extract and return the original data
    return [d2, d1, d0]

# Test the decoder with the given input
encoded_data = [int(c) for c in
decoded_data = hamming_decode(encoded_data)

# Convert the decoded data to a string of ASCII characters
ascii_str = ''.join([chr(int(''.join([str(bit) for bit in decoded_data[i:i+8]]), 2)) for i in range(0, len(decoded_data), 8)])
print(ascii_str)
